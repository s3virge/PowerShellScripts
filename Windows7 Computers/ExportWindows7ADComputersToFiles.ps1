function Start-PSAdmin {
	Start-Process PowerShell -Verb RunAs -ArgumentList ('-noexit -file "{0}"' -f $PSCommandPath)
}

function IsUserAdmin {
  $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
  $boolResult = $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
  return $boolResult
}

#–µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –∞–¥–º–∏–Ω, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏—è–º–∏
if ((IsUserAdmin) -eq $false) {
	Start-PSAdmin
	exit
}

Clear-Host

# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–≤ —Å Windows 7
write-host "------------------------------------------------"
Write-host "¬ AD Ì‡È‰ÂÌÓ $compNumber ÍÓÔ¸˛ÚÂÓ‚ Ò Windows 7"
write-host "------------------------------------------------"
$compNumber = (Get-ADComputer -Filter { enabled -eq "true" -and OperatingSystem -Like '*Windows 7*' }).count 

# Get-ADComputer -Identity "kobzar" -Properties *
# Get-ADComputer -Filter * -Properties * | select-object  name, whenCreated, whenChanged, LastLogonDate, canonicalName, OperatingSystem, IPv4Address, enabled | Export-Csv $CSVFileName

# –∫–æ–º–ø—ã –±—É–¥—É—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ LastLogonDate
# Get-ADComputer -Filter * -Properties * | Sort-Object LastLogonDate | select-object  name, whenCreated, whenChanged, LastLogonDate, canonicalName, OperatingSystem, IPv4Address, enabled | Export-Csv $CSVFileName

# –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–ø—ã –∏–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞
# Get-ADComputer -SearchBase 'OU=Admins,OU=Workstations,DC=intetics,DC=com,DC=ua' -Filter * -Properties * | Sort-Object LastLogonDate | select-object  name, whenCreated, whenChanged, LastLogonDate, canonicalName, OperatingSystem, IPv4Address, enabled <# | Export-Csv $CSVFileName #>

# —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ csv –≤—Å–µ –∫–æ–º–ø—ã –≤ GIS
# Get-ADComputer -SearchBase 'OU=GIS, OU=Workstations, DC=intetics, DC=com, DC=ua' -Filter * -Properties * | Sort-Object LastLogonDate | select-object  name, whenCreated, whenChanged, LastLogonDate, canonicalName, OperatingSystem, IPv4Address, enabled | Export-Csv $CSVFileName

# Get-ADComputer -SearchBase 'OU=GISDEV, OU=GIS, OU=Workstations, DC=intetics, DC=com, DC=ua' -Filter * -Properties * | Sort-Object LastLogonDate | select-object  name, whenCreated, whenChanged, LastLogonDate, canonicalName, OperatingSystem, IPv4Address, enabled | Export-Csv $CSVFileName
# Get-ADComputer -SearchBase 'OU=GISDEV, OU=GIS, OU=Workstations, DC=intetics, DC=com, DC=ua' -Filter {enabled -eq "true" -and OperatingSystem -Like '*Windows 7*' } -Properties * | Sort-Object LastLogonDate | select-object  name, whenCreated, whenChanged, LastLogonDate, canonicalName, OperatingSystem, IPv4Address, enabled | Export-Csv $CSVFileName

# –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø—ã –∏–∑ Workstations-GIS-GISDEV –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ —Å Windows 7. –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ LastLogonDate.
# Get-ADComputer -SearchBase 'OU=GISDEV, OU=GIS, OU=Workstations, DC=intetics, DC=com, DC=ua' -Filter {enabled -eq "true" -and OperatingSystem -Like '*Windows 7*' } -Properties * | 
# Sort-Object LastLogonDate | 
# select-object  name, whenCreated, whenChanged, LastLogonDate, canonicalName, OperatingSystem, IPv4Address, enabled |
# Format-Table -Wrap -AutoSize 

# –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –∫–æ–º–ø—ã –∏–∑ Workstations-GIS-GISDEV –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ —Å Windows 7. –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ LastLogonDate. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ txt —Ñ–∞–π–ª
# Get-ADComputer -SearchBase 'OU=GISDEV, OU=GIS, OU=Workstations, DC=intetics, DC=com, DC=ua' -Filter {enabled -eq "true" -and OperatingSystem -Like '*Windows 7*' } -Properties * | 
# Sort-Object LastLogonDate | 
# select-object  name, whenCreated, whenChanged, LastLogonDate, canonicalName, OperatingSystem, IPv4Address, enabled |
# Format-Table -AutoSize | Out-File $TXTFileName

# $OU1 = "GISDEV"
# $OU2 = "GIS"

# $cmputers = Get-ADComputer -SearchBase "OU=$OU1, OU=$OU2, OU=Workstations, DC=intetics, DC=com, DC=ua" -Filter { enabled -eq "true" -and OperatingSystem -Like '*Windows 7*' } -Properties * | 
#     Sort-Object LastLogonDate | 
#     select-object  name, whenCreated, whenChanged, LastLogonDate, canonicalName, OperatingSystem, IPv4Address, enabled |
#     Format-Table -AutoSize | Out-File $TXTFileName

function GetOUWindows7Cpmputers ($OperationU1, $OperationU2) {    
    if ($OperationU2) {
        $searchBase = [string]::Format('OU={0}, OU={1}, OU=Workstations, DC=intetics, DC=com, DC=ua', $OperationU1, $OperationU2)
        $TXTFileName = $PSScriptRoot + "\Workstations-$OperationU1-$OperationU2"
    }
    else {
        $searchBase = [string]::Format('OU={0}, OU=Workstations, DC=intetics, DC=com, DC=ua', $OperationU1)
        # $TXTFileName = $PSScriptRoot + "\Workstations-$OperationU1.txt"
        $TXTFileName = $PSScriptRoot + "\Workstations-$OperationU1.csv"
    }

    #$ListOfComputers = Get-ADComputer -SearchBase $searchBase -Filter { enabled -eq "true" -and OperatingSystem -Like '*Windows 7*' } -Properties * | 
     #   Sort-Object LastLogonDate | select-object  name, whenCreated, whenChanged, LastLogonDate, canonicalName, OperatingSystem, IPv4Address, enabled;
		
		$ListOfComputers = Get-ADComputer -SearchBase $searchBase -Filter { enabled -eq "true" } -Properties * | 
        select-object  name, canonicalName;

    if ($ListOfComputers) {
        $fileExtention = ".txt"
        # $fileExtention = ".csv"

        $TXTFileName += $fileExtention
        $ListOfComputers | Format-Table -AutoSize | Out-String -Width 4096 | Out-File $TXTFileName
        # $ListOfComputers | Export-Csv $TXTFileName
    }
}

GetOUWindows7Cpmputers 'Accountants'
GetOUWindows7Cpmputers 'Admins'
GetOUWindows7Cpmputers 'Assistants'
GetOUWindows7Cpmputers 'Common'
GetOUWindows7Cpmputers 'PM' 'Developers' 
GetOUWindows7Cpmputers 'Directors'
GetOUWindows7Cpmputers 'GISDEV' 'GIS'
GetOUWindows7Cpmputers 'HERE_Temp' 'GIS'
GetOUWindows7Cpmputers 'ParkMe' 'GIS'
GetOUWindows7Cpmputers 'PL' 'GIS'
GetOUWindows7Cpmputers 'Students' 'GIS'
GetOUWindows7Cpmputers 'VM' 'GIS'
GetOUWindows7Cpmputers 'Win10x64' 'GIS'
GetOUWindows7Cpmputers 'Win7x64' 'GIS'
GetOUWindows7Cpmputers 'HR'
GetOUWindows7Cpmputers 'Laptops'
GetOUWindows7Cpmputers 'Lawyers'
GetOUWindows7Cpmputers 'Noname'
GetOUWindows7Cpmputers 'OfficeManagers'
GetOUWindows7Cpmputers 'Sales'
GetOUWindows7Cpmputers 'Virtual'
GetOUWindows7Cpmputers 'Developers'